
POV Globe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004f8  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008005f8  008005f8  000009cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b0  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c0  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ee  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ba  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_11>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_16>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	4b 01       	movw	r8, r22
  6a:	4d 01       	movw	r8, r26
  6c:	4f 01       	movw	r8, r30
  6e:	51 01       	movw	r10, r2
  70:	53 01       	movw	r10, r6
  72:	55 01       	movw	r10, r10
  74:	57 01       	movw	r10, r14
  76:	59 01       	movw	r10, r18
  78:	5b 01       	movw	r10, r22
  7a:	5d 01       	movw	r10, r26
  7c:	68 01       	movw	r12, r16
  7e:	6a 01       	movw	r12, r20
  80:	6c 01       	movw	r12, r24
  82:	6e 01       	movw	r12, r28
  84:	70 01       	movw	r14, r0
  86:	72 01       	movw	r14, r4
  88:	74 01       	movw	r14, r8
  8a:	76 01       	movw	r14, r12
  8c:	78 01       	movw	r14, r16
  8e:	7a 01       	movw	r14, r20
  90:	87 01       	movw	r16, r14
  92:	89 01       	movw	r16, r18
  94:	8b 01       	movw	r16, r22
  96:	8d 01       	movw	r16, r26
  98:	8f 01       	movw	r16, r30
  9a:	91 01       	movw	r18, r2
  9c:	93 01       	movw	r18, r6
  9e:	95 01       	movw	r18, r10
  a0:	a0 01       	movw	r20, r0
  a2:	a2 01       	movw	r20, r4
  a4:	a4 01       	movw	r20, r8
  a6:	a6 01       	movw	r20, r12
  a8:	a8 01       	movw	r20, r16
  aa:	aa 01       	movw	r20, r20
  ac:	ac 01       	movw	r20, r24
  ae:	ae 01       	movw	r20, r28

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d8 e0       	ldi	r29, 0x08	; 8
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	15 e0       	ldi	r17, 0x05	; 5
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	e0 e4       	ldi	r30, 0x40	; 64
  c4:	f4 e0       	ldi	r31, 0x04	; 4
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a8 3f       	cpi	r26, 0xF8	; 248
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	25 e0       	ldi	r18, 0x05	; 5
  d4:	a8 ef       	ldi	r26, 0xF8	; 248
  d6:	b5 e0       	ldi	r27, 0x05	; 5
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	ab 3f       	cpi	r26, 0xFB	; 251
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 b0 01 	call	0x360	; 0x360 <main>
  e6:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <__vector_1>:
/* INT0 called when reed switch is activated. The # of clock cycles     */
/* from the previous interrupt are counted, then divided by the number  */
/* of total image columns then set to Timer1's CTC TOP value. Timer1,   */
/* Timer1 overflow counter and current column counter are reset to 0.   */
/************************************************************************/
ISR(INT0_vect) {
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
   if (t0OverflowCounter > 30) {
 10c:	80 91 f9 05 	lds	r24, 0x05F9
 110:	90 91 fa 05 	lds	r25, 0x05FA
 114:	8f 31       	cpi	r24, 0x1F	; 31
 116:	91 05       	cpc	r25, r1
 118:	50 f1       	brcs	.+84     	; 0x16e <__vector_1+0x80>
      OCR1A = ( ( (256 * t0OverflowCounter) + TCNT0 ) / imageColumns ) - 1;  // Set Timer1 Output Compare Match value
 11a:	26 b5       	in	r18, 0x26	; 38
 11c:	98 2f       	mov	r25, r24
 11e:	88 27       	eor	r24, r24
 120:	ac 01       	movw	r20, r24
 122:	42 0f       	add	r20, r18
 124:	51 1d       	adc	r21, r1
 126:	9a 01       	movw	r18, r20
 128:	a5 e0       	ldi	r26, 0x05	; 5
 12a:	b2 e0       	ldi	r27, 0x02	; 2
 12c:	0e 94 0f 02 	call	0x41e	; 0x41e <__umulhisi3>
 130:	48 1b       	sub	r20, r24
 132:	59 0b       	sbc	r21, r25
 134:	56 95       	lsr	r21
 136:	47 95       	ror	r20
 138:	84 0f       	add	r24, r20
 13a:	95 1f       	adc	r25, r21
 13c:	00 24       	eor	r0, r0
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	00 1c       	adc	r0, r0
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	00 1c       	adc	r0, r0
 14a:	89 2f       	mov	r24, r25
 14c:	90 2d       	mov	r25, r0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	90 93 89 00 	sts	0x0089, r25
 154:	80 93 88 00 	sts	0x0088, r24
      TCNT0 = 0;
 158:	16 bc       	out	0x26, r1	; 38
      TCNT1 = 0;
 15a:	10 92 85 00 	sts	0x0085, r1
 15e:	10 92 84 00 	sts	0x0084, r1
      currentImageColumn = 0;    // Reset current column
 162:	10 92 f8 05 	sts	0x05F8, r1
      t0OverflowCounter = 0;     // Reset Timer0 overflow counter
 166:	10 92 fa 05 	sts	0x05FA, r1
 16a:	10 92 f9 05 	sts	0x05F9, r1
   }
}
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_16>:
/************************************************************************/
/* Timer0 Overflow Interrupt                                            */
/************************************************************************/
/* Increment timer 0 overflow counter.                                  */
/************************************************************************/
ISR(TIMER0_OVF_vect){
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
   t0OverflowCounter++;
 19a:	80 91 f9 05 	lds	r24, 0x05F9
 19e:	90 91 fa 05 	lds	r25, 0x05FA
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 fa 05 	sts	0x05FA, r25
 1a8:	80 93 f9 05 	sts	0x05F9, r24
}
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_11>:
/************************************************************************/
/* Timer1 Output Compare Match Interrupt                                */
/************************************************************************/
/* Increments the current display column                                */
/************************************************************************/
ISR(TIMER1_COMPA_vect) {
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
   currentImageColumn++;
 1c6:	80 91 f8 05 	lds	r24, 0x05F8
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 f8 05 	sts	0x05F8, r24
}
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_Z7rowsOffv>:
/* rowsOff                                                              */
/************************************************************************/
/* Sets all row I/O pins to 0.                                          */
/************************************************************************/
void rowsOff(void) {
   PORTC &= 0xFE;    // 0b11111110 PC0 LOW              
 1dc:	40 98       	cbi	0x08, 0	; 8
   PORTD &= 0x04;    // 0b00000100 PD0-PD1, PD3-PD7 LOW 
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	84 70       	andi	r24, 0x04	; 4
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret

000001e6 <_Z10columnsOffv>:
/* columnsOff                                                           */
/************************************************************************/
/* Sets all column I/O pins to 1.                                       */
/************************************************************************/
void columnsOff(void) {
   PORTB |= 0x3F;    // 0b00111111 PB0-PB5 HIGH
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	8f 63       	ori	r24, 0x3F	; 63
 1ea:	85 b9       	out	0x05, r24	; 5
   PORTC |= 0x1E;    // 0b00011110 PC1-PC4 HIGH
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	8e 61       	ori	r24, 0x1E	; 30
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	08 95       	ret

000001f4 <_Z10TC0_Enableh>:
/* 0: Off | 1: clk/1 | 2: clk/8 | 3: clk/64 | 4: clk/256 | 5: clk/1-24  */
/* 6: External falling edge | 7: External rising edge.                  */
/* Invalid prescaler disables timer.                                    */
/************************************************************************/
void TC0_Enable(uint8_t prescaler) {
   CLEARBITMASK(TCCR0B, 0x03);
 1f4:	95 b5       	in	r25, 0x25	; 37
 1f6:	9c 7f       	andi	r25, 0xFC	; 252
 1f8:	95 bd       	out	0x25, r25	; 37
   if (prescaler > 0 && prescaler < 8) {
 1fa:	9f ef       	ldi	r25, 0xFF	; 255
 1fc:	98 0f       	add	r25, r24
 1fe:	97 30       	cpi	r25, 0x07	; 7
 200:	18 f4       	brcc	.+6      	; 0x208 <_Z10TC0_Enableh+0x14>
      SETBITMASK(TCCR0B, prescaler);
 202:	95 b5       	in	r25, 0x25	; 37
 204:	89 2b       	or	r24, r25
 206:	85 bd       	out	0x25, r24	; 37
 208:	08 95       	ret

0000020a <_Z10TC1_Enableh>:
/* 0: Off | 1: clk/1 | 2: clk/8 | 3: clk/64 | 4: clk/256 | 5: clk/1-24  */
/* 6: External falling edge | 7: External rising edge.                  */
/* Invalid prescaler disables timer.                                    */
/************************************************************************/
void TC1_Enable(uint8_t prescaler) {
   if (prescaler == 0) {
 20a:	81 11       	cpse	r24, r1
 20c:	06 c0       	rjmp	.+12     	; 0x21a <_Z10TC1_Enableh+0x10>
      CLEARBITMASK(TCCR1B, 0x03);
 20e:	e1 e8       	ldi	r30, 0x81	; 129
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8c 7f       	andi	r24, 0xFC	; 252
 216:	80 83       	st	Z, r24
 218:	08 95       	ret
   } else {
      SETBITMASK(TCCR1B, prescaler);
 21a:	e1 e8       	ldi	r30, 0x81	; 129
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	89 2b       	or	r24, r25
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <_Z4initv>:
/* Initialize I/O pins, timers and interrupts and starts timer 0 & 1.   */
/************************************************************************/
void init(void){
   
   // Setup GPIO data direction
   DDRB  |= 0b00111111;	   // DDRB - PB0-PB5 Output
 226:	84 b1       	in	r24, 0x04	; 4
 228:	8f 63       	ori	r24, 0x3F	; 63
 22a:	84 b9       	out	0x04, r24	; 4
   DDRC  |= 0b00011111;	   // DDRC - PC0-PC5 OUtput
 22c:	87 b1       	in	r24, 0x07	; 7
 22e:	8f 61       	ori	r24, 0x1F	; 31
 230:	87 b9       	out	0x07, r24	; 7
   DDRD   = 0b11111011;	   // DDRD - PD0-PD1 & PD3-PD7 Output, PD2 Input
 232:	8b ef       	ldi	r24, 0xFB	; 251
 234:	8a b9       	out	0x0a, r24	; 10
   SETBIT(PORTD, PD2);	   // Enable pull-up on PD2(INT0)
 236:	5a 9a       	sbi	0x0b, 2	; 11

   rowsOff();              // Set rows LOW
 238:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z7rowsOffv>
   columnsOff();           // Set columns HIGH
 23c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10columnsOffv>
   
   SETBIT(TIMSK0, TOIE0);  // Timer0 Overflow Interrupt Enable
 240:	ee e6       	ldi	r30, 0x6E	; 110
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	81 60       	ori	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
   SETBIT(TCCR1B, WGM12);  // Timer1 CTC Mode
 24a:	e1 e8       	ldi	r30, 0x81	; 129
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24
   OCR1A = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 89 00 	sts	0x0089, r25
 25c:	80 93 88 00 	sts	0x0088, r24
   SETBIT(TIMSK1, OCIE1A); // Timer1 Output Compare A Match Interrupt Enable
 260:	ef e6       	ldi	r30, 0x6F	; 111
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
   SETBIT(EIMSK, INT0);    // External Interrupt 0 Enable
 26a:	e8 9a       	sbi	0x1d, 0	; 29
      
   SREG   |= 0b10000000;   // Global Interrupt Enable
 26c:	8f b7       	in	r24, 0x3f	; 63
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8f bf       	out	0x3f, r24	; 63

   TC0_Enable(3);          // Start Timer 0, clk/64 Prescaler
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z10TC0_Enableh>
   TC1_Enable(3);          // Start Timer 1, clk/64 Prescaler
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 05 01 	call	0x20a	; 0x20a <_Z10TC1_Enableh>
 27e:	08 95       	ret

00000280 <_Z9setColumnhh>:
      setColumn(col, 1);
   }
}

void setColumn(uint8_t col, uint8_t val) {
   if (val == 1) {
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	e9 f4       	brne	.+58     	; 0x2be <_Z9setColumnhh+0x3e>
      switch(col) {
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	8a 30       	cpi	r24, 0x0A	; 10
 288:	91 05       	cpc	r25, r1
 28a:	a8 f5       	brcc	.+106    	; 0x2f6 <_Z9setColumnhh+0x76>
 28c:	fc 01       	movw	r30, r24
 28e:	ec 5c       	subi	r30, 0xCC	; 204
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
         case 0: SETBIT(PORTB, PB0); break;
 296:	28 9a       	sbi	0x05, 0	; 5
 298:	08 95       	ret
         case 1: SETBIT(PORTB, PB1); break;
 29a:	29 9a       	sbi	0x05, 1	; 5
 29c:	08 95       	ret
         case 2: SETBIT(PORTB, PB2); break;
 29e:	2a 9a       	sbi	0x05, 2	; 5
 2a0:	08 95       	ret
         case 3: SETBIT(PORTB, PB3); break;
 2a2:	2b 9a       	sbi	0x05, 3	; 5
 2a4:	08 95       	ret
         case 4: SETBIT(PORTB, PB4); break;
 2a6:	2c 9a       	sbi	0x05, 4	; 5
 2a8:	08 95       	ret
         case 5: SETBIT(PORTB, PB5); break;
 2aa:	2d 9a       	sbi	0x05, 5	; 5
 2ac:	08 95       	ret
         case 6: SETBIT(PORTC, PC1); break;
 2ae:	41 9a       	sbi	0x08, 1	; 8
 2b0:	08 95       	ret
         case 7: SETBIT(PORTC, PC2); break;
 2b2:	42 9a       	sbi	0x08, 2	; 8
 2b4:	08 95       	ret
         case 8: SETBIT(PORTC, PC3); break;
 2b6:	43 9a       	sbi	0x08, 3	; 8
 2b8:	08 95       	ret
         case 9: SETBIT(PORTC, PC4); break;
 2ba:	44 9a       	sbi	0x08, 4	; 8
 2bc:	08 95       	ret
      }
   } else {
      switch(col) {
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	91 05       	cpc	r25, r1
 2c4:	c0 f4       	brcc	.+48     	; 0x2f6 <_Z9setColumnhh+0x76>
 2c6:	fc 01       	movw	r30, r24
 2c8:	e2 5c       	subi	r30, 0xC2	; 194
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
         case 0: CLEARBIT(PORTB, PB0); break;
 2d0:	28 98       	cbi	0x05, 0	; 5
 2d2:	08 95       	ret
         case 1: CLEARBIT(PORTB, PB1); break;
 2d4:	29 98       	cbi	0x05, 1	; 5
 2d6:	08 95       	ret
         case 2: CLEARBIT(PORTB, PB2); break;
 2d8:	2a 98       	cbi	0x05, 2	; 5
 2da:	08 95       	ret
         case 3: CLEARBIT(PORTB, PB3); break;
 2dc:	2b 98       	cbi	0x05, 3	; 5
 2de:	08 95       	ret
         case 4: CLEARBIT(PORTB, PB4); break;
 2e0:	2c 98       	cbi	0x05, 4	; 5
 2e2:	08 95       	ret
         case 5: CLEARBIT(PORTB, PB5); break;
 2e4:	2d 98       	cbi	0x05, 5	; 5
 2e6:	08 95       	ret
         case 6: CLEARBIT(PORTC, PC1); break;
 2e8:	41 98       	cbi	0x08, 1	; 8
 2ea:	08 95       	ret
         case 7: CLEARBIT(PORTC, PC2); break;
 2ec:	42 98       	cbi	0x08, 2	; 8
 2ee:	08 95       	ret
         case 8: CLEARBIT(PORTC, PC3); break;
 2f0:	43 98       	cbi	0x08, 3	; 8
 2f2:	08 95       	ret
         case 9: CLEARBIT(PORTC, PC4); break;
 2f4:	44 98       	cbi	0x08, 4	; 8
 2f6:	08 95       	ret

000002f8 <_Z6setRowhh>:
      }
   }
}

void setRow(uint8_t row, uint8_t val) {
   if (val == 1) {
 2f8:	61 30       	cpi	r22, 0x01	; 1
 2fa:	c9 f4       	brne	.+50     	; 0x32e <_Z6setRowhh+0x36>
      switch(row) {
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	91 05       	cpc	r25, r1
 302:	68 f5       	brcc	.+90     	; 0x35e <_Z6setRowhh+0x66>
 304:	fc 01       	movw	r30, r24
 306:	e8 5b       	subi	r30, 0xB8	; 184
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
         case 0: SETBIT(PORTC, PC0); break;
 30e:	40 9a       	sbi	0x08, 0	; 8
 310:	08 95       	ret
         case 1: SETBIT(PORTD, PD7); break;
 312:	5f 9a       	sbi	0x0b, 7	; 11
 314:	08 95       	ret
         case 2: SETBIT(PORTD, PD6); break;
 316:	5e 9a       	sbi	0x0b, 6	; 11
 318:	08 95       	ret
         case 3: SETBIT(PORTD, PD5); break;
 31a:	5d 9a       	sbi	0x0b, 5	; 11
 31c:	08 95       	ret
         case 4: SETBIT(PORTD, PD4); break;
 31e:	5c 9a       	sbi	0x0b, 4	; 11
 320:	08 95       	ret
         case 5: SETBIT(PORTD, PD1); break;
 322:	59 9a       	sbi	0x0b, 1	; 11
 324:	08 95       	ret
         case 6: SETBIT(PORTD, PD3); break;
 326:	5b 9a       	sbi	0x0b, 3	; 11
 328:	08 95       	ret
         case 7: SETBIT(PORTD, PD0); break;
 32a:	58 9a       	sbi	0x0b, 0	; 11
 32c:	08 95       	ret
      }
   } else {
      switch(row) {
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	91 05       	cpc	r25, r1
 334:	a0 f4       	brcc	.+40     	; 0x35e <_Z6setRowhh+0x66>
 336:	fc 01       	movw	r30, r24
 338:	e0 5b       	subi	r30, 0xB0	; 176
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	0c 94 09 02 	jmp	0x412	; 0x412 <__tablejump2__>
         case 0: CLEARBIT(PORTC, PC0); break;
 340:	40 98       	cbi	0x08, 0	; 8
 342:	08 95       	ret
         case 1: CLEARBIT(PORTD, PD7); break;
 344:	5f 98       	cbi	0x0b, 7	; 11
 346:	08 95       	ret
         case 2: CLEARBIT(PORTD, PD6); break;
 348:	5e 98       	cbi	0x0b, 6	; 11
 34a:	08 95       	ret
         case 3: CLEARBIT(PORTD, PD5); break;
 34c:	5d 98       	cbi	0x0b, 5	; 11
 34e:	08 95       	ret
         case 4: CLEARBIT(PORTD, PD4); break;
 350:	5c 98       	cbi	0x0b, 4	; 11
 352:	08 95       	ret
         case 5: CLEARBIT(PORTD, PD1); break;
 354:	59 98       	cbi	0x0b, 1	; 11
 356:	08 95       	ret
         case 6: CLEARBIT(PORTD, PD3); break;
 358:	5b 98       	cbi	0x0b, 3	; 11
 35a:	08 95       	ret
         case 7: CLEARBIT(PORTD, PD0); break;
 35c:	58 98       	cbi	0x0b, 0	; 11
 35e:	08 95       	ret

00000360 <main>:
ISR(TIMER1_COMPA_vect) {
   currentImageColumn++;
}

int main(void) {
   init();
 360:	0e 94 13 01 	call	0x226	; 0x226 <_Z4initv>
/************************************************************************/
ISR(TIMER1_COMPA_vect) {
   currentImageColumn++;
}

int main(void) {
 364:	71 2c       	mov	r7, r1
 366:	81 2c       	mov	r8, r1
         
         rowValue = image[currentImageColumn][col];      // Read value for block of 8 LEDs
         setColumn(col, 0);                              // Enable column
         
         for (uint8_t row = 0; row < 8; row++) {         // Loop through each LED (rows)
            if ( (rowValue & (1<<row)) >> row ) {
 368:	ee 24       	eor	r14, r14
 36a:	e3 94       	inc	r14
 36c:	f1 2c       	mov	r15, r1
   while (1) {
      
      for (uint8_t col = 0; col < 10; col++) {    // Loop through each block of 8 LEDs (columns)
         
         rowValue = image[currentImageColumn][col];      // Read value for block of 8 LEDs
         setColumn(col, 0);                              // Enable column
 36e:	0f 2e       	mov	r0, r31
 370:	f7 e0       	ldi	r31, 0x07	; 7
 372:	9f 2e       	mov	r9, r31
 374:	f0 2d       	mov	r31, r0
 376:	a7 2c       	mov	r10, r7
 378:	b8 2c       	mov	r11, r8
/************************************************************************/
ISR(TIMER1_COMPA_vect) {
   currentImageColumn++;
}

int main(void) {
 37a:	c7 2c       	mov	r12, r7
 37c:	d8 2c       	mov	r13, r8
 37e:	dc 2d       	mov	r29, r12
   init();
   while (1) {
      
      for (uint8_t col = 0; col < 10; col++) {    // Loop through each block of 8 LEDs (columns)
         
         rowValue = image[currentImageColumn][col];      // Read value for block of 8 LEDs
 380:	80 91 f8 05 	lds	r24, 0x05F8
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	e8 0f       	add	r30, r24
 39a:	f9 1f       	adc	r31, r25
 39c:	ec 0d       	add	r30, r12
 39e:	fd 1d       	adc	r31, r13
 3a0:	ef 5f       	subi	r30, 0xFF	; 255
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	80 81       	ld	r24, Z
 3a6:	80 93 00 01 	sts	0x0100, r24
         setColumn(col, 0);                              // Enable column
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	8c 2d       	mov	r24, r12
 3ae:	0e 94 40 01 	call	0x280	; 0x280 <_Z9setColumnhh>
 3b2:	c9 2d       	mov	r28, r9
 3b4:	0a 2d       	mov	r16, r10
 3b6:	1b 2d       	mov	r17, r11
         
         for (uint8_t row = 0; row < 8; row++) {         // Loop through each LED (rows)
            if ( (rowValue & (1<<row)) >> row ) {
 3b8:	20 91 00 01 	lds	r18, 0x0100
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	c7 01       	movw	r24, r14
 3c0:	00 2e       	mov	r0, r16
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <main+0x68>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <main+0x64>
 3cc:	28 23       	and	r18, r24
 3ce:	39 23       	and	r19, r25
 3d0:	00 2e       	mov	r0, r16
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <main+0x78>
 3d4:	35 95       	asr	r19
 3d6:	27 95       	ror	r18
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <main+0x74>
 3dc:	23 2b       	or	r18, r19
 3de:	21 f0       	breq	.+8      	; 0x3e8 <main+0x88>
               setRow(7-row, 1);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	8c 2f       	mov	r24, r28
 3e4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z6setRowhh>
            }
            setRow(7-row, 0);                              // Turn LED off
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	8c 2f       	mov	r24, r28
 3ec:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z6setRowhh>
 3f0:	0f 5f       	subi	r16, 0xFF	; 255
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	c1 50       	subi	r28, 0x01	; 1
 3f6:	00 f7       	brcc	.-64     	; 0x3b8 <main+0x58>
         }
         
         setColumn(col, 1);                              // Disable column
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	8d 2f       	mov	r24, r29
 3fc:	0e 94 40 01 	call	0x280	; 0x280 <_Z9setColumnhh>
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	c8 1a       	sub	r12, r24
 404:	d8 0a       	sbc	r13, r24

int main(void) {
   init();
   while (1) {
      
      for (uint8_t col = 0; col < 10; col++) {    // Loop through each block of 8 LEDs (columns)
 406:	8a e0       	ldi	r24, 0x0A	; 10
 408:	c8 16       	cp	r12, r24
 40a:	d1 04       	cpc	r13, r1
 40c:	09 f0       	breq	.+2      	; 0x410 <main+0xb0>
 40e:	b7 cf       	rjmp	.-146    	; 0x37e <main+0x1e>
 410:	b4 cf       	rjmp	.-152    	; 0x37a <main+0x1a>

00000412 <__tablejump2__>:
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	05 90       	lpm	r0, Z+
 418:	f4 91       	lpm	r31, Z
 41a:	e0 2d       	mov	r30, r0
 41c:	09 94       	ijmp

0000041e <__umulhisi3>:
 41e:	a2 9f       	mul	r26, r18
 420:	b0 01       	movw	r22, r0
 422:	b3 9f       	mul	r27, r19
 424:	c0 01       	movw	r24, r0
 426:	a3 9f       	mul	r26, r19
 428:	70 0d       	add	r23, r0
 42a:	81 1d       	adc	r24, r1
 42c:	11 24       	eor	r1, r1
 42e:	91 1d       	adc	r25, r1
 430:	b2 9f       	mul	r27, r18
 432:	70 0d       	add	r23, r0
 434:	81 1d       	adc	r24, r1
 436:	11 24       	eor	r1, r1
 438:	91 1d       	adc	r25, r1
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
